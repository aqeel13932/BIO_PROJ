install.packages(dplyr)
install.packages('dplyr')
install.packages('ggplot2')
states              <- c("AT-rich", "GC-rich") # Define the names of the states
ATrichprobs         <- c(0.7, 0.3)             # Set the probabilities of switching states, where the previous state was "AT-rich"
GCrichprobs         <- c(0.1, 0.9)             # Set the probabilities of switching states, where the previous state was "GC-rich"
thetransitionmatrix <- matrix(c(ATrichprobs, GCrichprobs), 2, 2, byrow = TRUE) # Create a 2 x 2 matrix
rownames(thetransitionmatrix) <- states
colnames(thetransitionmatrix) <- states
thetransitionmatrix                            # Print out the transition matrix
install.packages('randomForest')
install.packages('caret')
install.packages('kernlab')
exit
exit()
close()
install.packages('kart')
install.packages("xgboost")
calc.cor.test <- function(x=NULL,y=NULL) {
cor.res <- cor.test(x,y,method = 'spear',alternative = 'great', continuity = T)
res <- c(cor.res$est,cor.res$p.val)
names(res) <- c('rho','p.val')
return(res)
}
evalGold <- function(pred=NULL,goldStandard=NULL) {
col.eval <- apply(as.array(1:8),1,function(x) calc.cor.test(x=pred[,x],y=goldStandard[,x]))
colnames(col.eval) <- colnames(pred)
col.eval['p.val',col.eval['p.val',] < 1e-16] <- 1e-16
row.eval <- apply(as.array(1:50),1,function(x) calc.cor.test(x=rank(pred[x,],ties.method = 'min'),y=rank(goldStandard[x,],ties.method = 'min')))
colnames(row.eval) <- rownames(pred)
row.eval['p.val',row.eval['p.val',] < 1e-16] <- 1e-16
geom.mean.col <- exp(sum(log(col.eval['p.val',]))/8)
geom.mean.row <- exp(sum(log(row.eval['p.val',]))/50)
score <- sum(-log(c(geom.mean.row,geom.mean.col)))/2
return(score)
}
1:50
(1:50)*8
1:50*8
x = 1:50
x
x = cbind((x,x,x,x))
x = cbind(x,x)
x
x = 1:50
x = cbind(x,x,x,x,x,x,x,x)
x
evalGold(x,x)
warnings()
dim(x)
x = 1:50
xs = sort(x,decreasing = TRUE)
xs
x = cbind(x,xs,x,xs,x,xs,x,xs)
x
evalGold(x,x)
evalGold(x,x)
cor.test(5,10)
cor.test(5,10,method = 'spear',alternative = 'great', continuity = T)
cor.test([1:50],[1:50],method = 'spear',alternative = 'great', continuity = T)
cor.test(c(1:50),c(1:50),method = 'spear',alternative = 'great', continuity = T)
cor.res<- cor.test(c(1:50),c(1:50),method = 'spear',alternative = 'great', continuity = T)
cor.res
res<-c(cor.res$est,cor.res$p.value)
res
res<-c(cor.res$estimate,cor.res$p.value)
res
evalGold(x,x)
calc.cor.test <- function(x=NULL,y=NULL) {
cor.res <- cor.test(x,y,method = 'spear',alternative = 'great', continuity = T)
res <- c(cor.res$est,cor.res$p.val)
names(res) <- c('rho','p.val')
return(res)
}
evalGold <- function(pred=NULL,goldStandard=NULL) {
col.eval <- apply(as.array(1:8),1,function(x) calc.cor.test(x=pred[,x],y=goldStandard[,x]))
print(colnames(pred))
colnames(col.eval) <- colnames(pred)
col.eval['p.val',col.eval['p.val',] < 1e-16] <- 1e-16
row.eval <- apply(as.array(1:50),1,function(x) calc.cor.test(x=rank(pred[x,],ties.method = 'min'),y=rank(goldStandard[x,],ties.method = 'min')))
colnames(row.eval) <- rownames(pred)
row.eval['p.val',row.eval['p.val',] < 1e-16] <- 1e-16
geom.mean.col <- exp(sum(log(col.eval['p.val',]))/8)
geom.mean.row <- exp(sum(log(row.eval['p.val',]))/50)
score <- sum(-log(c(geom.mean.row,geom.mean.col)))/2
return(score)
}
x = 1:50
xs = sort(x,decreasing = TRUE)
x = cbind(x,xs,x,xs,x,xs,x,xs)
evalGold(x,x)
colnames(xs)= c('1','2','3','4','5','6','7','8')
colnames(x)= c('1','2','3','4','5','6','7','8')
evalGold(x,x)
warnings()
calc.cor.test <- function(x=NULL,y=NULL) {
cor.res <- cor.test(x,y,method = 'spear',alternative = 'great', continuity = T)
res <- c(cor.res$est,cor.res$p.val)
names(res) <- c('rho','p.val')
return(res)
}
evalGold <- function(pred=NULL,goldStandard=NULL) {
col.eval <- apply(as.array(1:8),1,function(x) calc.cor.test(x=pred[,x],y=goldStandard[,x]))
print(col.eval)
print(colnames(pred))
colnames(col.eval) <- colnames(pred)
col.eval['p.val',col.eval['p.val',] < 1e-16] <- 1e-16
row.eval <- apply(as.array(1:50),1,function(x) calc.cor.test(x=rank(pred[x,],ties.method = 'min'),y=rank(goldStandard[x,],ties.method = 'min')))
colnames(row.eval) <- rownames(pred)
row.eval['p.val',row.eval['p.val',] < 1e-16] <- 1e-16
geom.mean.col <- exp(sum(log(col.eval['p.val',]))/8)
geom.mean.row <- exp(sum(log(row.eval['p.val',]))/50)
score <- sum(-log(c(geom.mean.row,geom.mean.col)))/2
return(score)
}
x = 1:50
x*8
(x)*8
x = cbind(x,x,x,x,x,x,x,x)
evalGold(x,x)
colnames(x)= c('1','2','3','4','5','6','7','8')
evalGold(x,x)
x = cbind(sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50))
x
evalGold(x,x)
evalGold(x,x)
colnames(x)=c('1','2','3','4','5','6','7','8')
evalGold(x,x)
x
x = cbind(sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50),sample(x,50))
colnames(x)=c('1','2','3','4','5','6','7','8')
evalGold(x,x)
evalGold(x,x)
evalGold(x,x)
t = (c( 38  36   5  16  36  40  26  23), c( 24  27  28  19   4   3   4   4),
t = (c( 38,36, 5,16,36,40,26,23),
t = (c( 38,36, 5,16,36,40,26,23),c( 24,27,28,19, 4, 3, 4, 4), c( 45,19,11,32,40,33, 9, 5),)
t = (c( 38,36, 5,16,36,40,26,23),c( 24,27,28,19, 4, 3, 4, 4), c( 45,19,11,32,40,33, 9, 5))
t = cbind(c( 38,36, 5,16,36,40,26,23),c( 24,27,28,19, 4, 3, 4, 4), c( 45,19,11,32,40,33, 9, 5))
t = cbind(c( 38,36, 5,16,36,40,26,23),c( 24,27,28,19, 4, 3, 4, 4), c( 45,19,11,32,40,33, 9, 5),
c( 43,42, 8,38,42,44,21,46),
c( 48,15,50,50, 3,15,48,50),
c( 21,32,30,33,21,29,34,40),
c( 4,20,24,20,33, 2,14,10),
c( 31,46,46,17,18,28,35,25),
c( 8,24,40,37,48,25, 5,33),
c( 7, 4,15,27,29, 8,19,17),
c( 40,48,41, 6,49,43,46,20),
c( 3, 3, 9,45,30,16,27, 8),
c( 41,30,16,12,44,46,32, 7),
c( 33,47, 2,41,37,31,37, 1),
c( 11,38,20,42,39,49, 2, 9),
c( 22,10,37,30,12,42,42,11),
c( 36,28, 6,25,41, 4,15,28),
c( 28,21,39,43, 9,14,22,24),
c( 19, 2,22, 2,24,27,10,43),
c( 32,50,36, 3,26, 9,49, 6),
c(,2,39,12,36,27,26,39,27),
c( 13,11,14,11,17,48,47,14),
c( 35, 9,19,35,32,35,33,15),
c( 46,31,25,44,34, 1,12,19),
c( 27,37, 4, 7,11,38,41,26),
c(,6,18, 3,39,35,39,38,47),
c( 14,26,34,13,50,47,36,45),
c( 23,34,23,21,22,50,28,42),
c( 20, 1, 7,40,43,36,25,35),
c( 18,29,29, 4,15,19, 6, 3),
c( 15,13,21, 1, 5,37,40, 2),
c(,5,17,35,23,13,34,16,18),
c( 42,12,10, 8, 1,12,11,48),
c( 34,23,32,10,10,10,13,37),
c( 25,22, 1,28, 7,22,50,44),
c( 12, 7,48,49,16,20,17,36),
c( 39,40,38,47,25,23,24,39),
c( 17,43,45,24, 8, 5,45,22),
c( 49,14,31, 5,38,11,44,21),
c( 47,16,13,34,20,17, 1,16),
c( 50,41,27,14,28,41,20,38),
c(,9,35,44,22,47, 7,29,29),
c( 44,44,17,18,14,45, 8,32),
c( 30,49,42,15, 2,21,43,31),
c( 26, 8,49,48,45, 6,30,30),
c( 29, 5,33,26,19,30,23,12),
c(,1, 6,18,31,46,18, 7,13),
)
t = cbind(c( 38,36, 5,16,36,40,26,23),c( 24,27,28,19, 4, 3, 4, 4), c( 45,19,11,32,40,33, 9, 5),
c( 43,42, 8,38,42,44,21,46),
c( 48,15,50,50, 3,15,48,50),
c( 21,32,30,33,21,29,34,40),
c( 4,20,24,20,33, 2,14,10),
c( 31,46,46,17,18,28,35,25),
c( 8,24,40,37,48,25, 5,33),
c( 7, 4,15,27,29, 8,19,17),
c( 40,48,41, 6,49,43,46,20),
c( 3, 3, 9,45,30,16,27, 8),
c( 41,30,16,12,44,46,32, 7),
c( 33,47, 2,41,37,31,37, 1),
c( 11,38,20,42,39,49, 2, 9),
c( 22,10,37,30,12,42,42,11),
c( 36,28, 6,25,41, 4,15,28),
c( 28,21,39,43, 9,14,22,24),
c( 19, 2,22, 2,24,27,10,43),
c( 32,50,36, 3,26, 9,49, 6),
c(,2,39,12,36,27,26,39,27),
c( 13,11,14,11,17,48,47,14),
c( 35, 9,19,35,32,35,33,15),
c( 46,31,25,44,34, 1,12,19),
c( 27,37, 4, 7,11,38,41,26),
c(,6,18, 3,39,35,39,38,47),
c( 14,26,34,13,50,47,36,45),
c( 23,34,23,21,22,50,28,42),
c( 20, 1, 7,40,43,36,25,35),
c( 18,29,29, 4,15,19, 6, 3),
c( 15,13,21, 1, 5,37,40, 2),
c(,5,17,35,23,13,34,16,18),
c( 42,12,10, 8, 1,12,11,48),
c( 34,23,32,10,10,10,13,37),
c( 25,22, 1,28, 7,22,50,44),
c( 12, 7,48,49,16,20,17,36),
c( 39,40,38,47,25,23,24,39),
c( 17,43,45,24, 8, 5,45,22),
c( 49,14,31, 5,38,11,44,21),
c( 47,16,13,34,20,17, 1,16),
c( 50,41,27,14,28,41,20,38),
c(,9,35,44,22,47, 7,29,29),
c( 44,44,17,18,14,45, 8,32),
c( 30,49,42,15, 2,21,43,31),
c( 26, 8,49,48,45, 6,30,30),
c( 29, 5,33,26,19,30,23,12),
c( 1, 6,18,31,46,18, 7,13),
c( 16,45,43,46, 6,24,18,34),
c( 37,25,47,29,23,13,31,41),
c( 10,33,26, 9,31,32, 3,49))
t = cbind(c( 38,36, 5,16,36,40,26,23),c( 24,27,28,19, 4, 3, 4, 4), c( 45,19,11,32,40,33, 9, 5),
c( 43,42, 8,38,42,44,21,46),
c( 48,15,50,50, 3,15,48,50),
c( 21,32,30,33,21,29,34,40),
c( 4,20,24,20,33, 2,14,10),
c( 31,46,46,17,18,28,35,25),
c( 8,24,40,37,48,25, 5,33),
c( 7, 4,15,27,29, 8,19,17),
c( 40,48,41, 6,49,43,46,20),
c( 3, 3, 9,45,30,16,27, 8),
c( 41,30,16,12,44,46,32, 7),
c( 33,47, 2,41,37,31,37, 1),
c( 11,38,20,42,39,49, 2, 9),
c( 22,10,37,30,12,42,42,11),
c( 36,28, 6,25,41, 4,15,28),
c( 28,21,39,43, 9,14,22,24),
c( 19, 2,22, 2,24,27,10,43),
c( 32,50,36, 3,26, 9,49, 6),
c( 2,39,12,36,27,26,39,27),
c( 13,11,14,11,17,48,47,14),
c( 35, 9,19,35,32,35,33,15),
c( 46,31,25,44,34, 1,12,19),
c( 27,37, 4, 7,11,38,41,26),
c( 6,18, 3,39,35,39,38,47),
c( 14,26,34,13,50,47,36,45),
c( 23,34,23,21,22,50,28,42),
c( 20, 1, 7,40,43,36,25,35),
c( 18,29,29, 4,15,19, 6, 3),
c( 15,13,21, 1, 5,37,40, 2),
c( 5,17,35,23,13,34,16,18),
c( 42,12,10, 8, 1,12,11,48),
c( 34,23,32,10,10,10,13,37),
c( 25,22, 1,28, 7,22,50,44),
c( 12, 7,48,49,16,20,17,36),
c( 39,40,38,47,25,23,24,39),
c( 17,43,45,24, 8, 5,45,22),
c( 49,14,31, 5,38,11,44,21),
c( 47,16,13,34,20,17, 1,16),
c( 50,41,27,14,28,41,20,38),
c( 9,35,44,22,47, 7,29,29),
c( 44,44,17,18,14,45, 8,32),
c( 30,49,42,15, 2,21,43,31),
c( 26, 8,49,48,45, 6,30,30),
c( 29, 5,33,26,19,30,23,12),
c( 1, 6,18,31,46,18, 7,13),
c( 16,45,43,46, 6,24,18,34),
c( 37,25,47,29,23,13,31,41),
c( 10,33,26, 9,31,32, 3,49))
t
t(t)
colSums(t)
rowsum(t)
matrix = rbind(c( 38,36, 5,16,36,40,26,23),c( 24,27,28,19, 4, 3, 4, 4),c( 45,19,11,32,40,33, 9, 5),c( 43,42, 8,38,42,44,21,46),
c( 48,15,50,50, 3,15,48,50),c( 21,32,30,33,21,29,34,40),c( 4,20,24,20,33, 2,14,10),c( 31,46,46,17,18,28,35,25),
c( 8,24,40,37,48,25, 5,33),c( 7, 4,15,27,29, 8,19,17),c( 40,48,41, 6,49,43,46,20),c( 3, 3, 9,45,30,16,27, 8),
c( 41,30,16,12,44,46,32, 7),c( 33,47, 2,41,37,31,37, 1),c( 11,38,20,42,39,49, 2, 9),c( 22,10,37,30,12,42,42,11),
c( 36,28, 6,25,41, 4,15,28),c( 28,21,39,43, 9,14,22,24),c( 19, 2,22, 2,24,27,10,43),c( 32,50,36, 3,26, 9,49, 6),
c( 2,39,12,36,27,26,39,27),c( 13,11,14,11,17,48,47,14),c( 35, 9,19,35,32,35,33,15),c( 46,31,25,44,34, 1,12,19),
c( 27,37, 4, 7,11,38,41,26),c( 6,18, 3,39,35,39,38,47),c( 14,26,34,13,50,47,36,45),c( 23,34,23,21,22,50,28,42),
c( 20, 1, 7,40,43,36,25,35),c( 18,29,29, 4,15,19, 6, 3),c( 15,13,21, 1, 5,37,40, 2),c( 5,17,35,23,13,34,16,18),
c( 42,12,10, 8, 1,12,11,48),c( 34,23,32,10,10,10,13,37),c( 25,22, 1,28, 7,22,50,44),c( 12, 7,48,49,16,20,17,36),
c( 39,40,38,47,25,23,24,39),c( 17,43,45,24, 8, 5,45,22),c( 49,14,31, 5,38,11,44,21),c( 47,16,13,34,20,17, 1,16),
c( 50,41,27,14,28,41,20,38),c( 9,35,44,22,47, 7,29,29),c( 44,44,17,18,14,45, 8,32),c( 30,49,42,15, 2,21,43,31),
c( 26, 8,49,48,45, 6,30,30),c( 29, 5,33,26,19,30,23,12),c( 1, 6,18,31,46,18, 7,13),c( 16,45,43,46, 6,24,18,34),
c( 37,25,47,29,23,13,31,41),c( 10,33,26, 9,31,32, 3,49))
dim(matrix)
colSums(matrix)
evalGold(matrix,matrix)
colnames(matrix)=c('x1','x2','x3','x4','x5','x6','x7','x8')
evalGold(matrix,matrix)
calc.cor.test <- function(x=NULL,y=NULL) {
cor.res <- cor.test(x,y,method = 'spear',alternative = 'great', continuity = T)
res <- c(cor.res$est,cor.res$p.val)
names(res) <- c('rho','p.val')
return(res)
}
evalGold <- function(pred=NULL,goldStandard=NULL) {
col.eval <- apply(as.array(1:8),1,function(x) calc.cor.test(x=pred[,x],y=goldStandard[,x]))
print(col.eval)
colnames(col.eval) <- colnames(pred)
col.eval['p.val',col.eval['p.val',] < 1e-16] <- 1e-16
row.eval <- apply(as.array(1:50),1,function(x) calc.cor.test(x=rank(pred[x,],ties.method = 'min'),y=rank(goldStandard[x,],ties.method = 'min')))
colnames(row.eval) <- rownames(pred)
row.eval['p.val',row.eval['p.val',] < 1e-16] <- 1e-16
geom.mean.col <- exp(sum(log(col.eval['p.val',]))/8)
geom.mean.row <- exp(sum(log(row.eval['p.val',]))/50)
score <- sum(-log(c(geom.mean.row,geom.mean.col)))/2
return(score)
}
cor.test(1:50,1:50,method = 'spear',alternative = 'great', continuity = T)
cor.test(1:50,sample(1:50,50,replace = False),method = 'spear',alternative = 'great', continuity = T)
cor.test(1:50,sample(1:50,50,replace =FALSE),method = 'spear',alternative = 'great', continuity = T)
cor.test(1:50,sample(1:50,50,replace =FALSE),method = 'spear',alternative = 'great', continuity = T)
cor.test(1:50,sample(1:50,50,replace =FALSE),method = 'spear',alternative = 'great', continuity = T)
cor.test(matrix[,1],matrix[,1],method = 'spear',alternative = 'great', continuity = T)
cor.test(matrix[,1],matrix[,2],method = 'spear',alternative = 'great', continuity = T)
cor.test(matrix[,1],matrix[,2],method = 'spear',alternative = 'great', continuity = T)
cor.test(matrix[,1],matrix[,2],method = 'spear',alternative = 'great', continuity = T)
tt<- cor.test(matrix[,1],matrix[,2],method = 'spear',alternative = 'great', continuity = T)
tt
tt$p.value
?cor.test
tt<- cor.test(matrix[,1],matrix[,2],method = 'spear',alternative = 'two.sided', continuity = T)
tt
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
x
x
apply(x, 2, mean, trim = .2)
x
x$x1
x('x1')
x
x
x
x(0,0)
x(0)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
typeof(x)
x[0]
x[1]
x[1,2]
x= c(1,2,3,4,5,7,8)
print(x[1:3])
for (i in 1:50){
}
dim(nums)<-(100,8)
xxx = [1,2,3,4]
xxx = c(1,2,3,4)
dim(xxx) <-c(2,2)
xxx
xxx = c(1,2,3,4,5,6)
dim(xxx) <-c(3,2)
xxx
x = 1:50
x
m = cbind(x,x,x,x,x,x,x,x)
m
evalGold(m,m)
t = cbind(x,x,x,x,x,x,x,x)
evalGold(t,m)
cd '/home/aqeel/Documents/3rdsemester/BIO_PROJ/AQEEL_MODELS/'
cd /home/aqeel/Documents/3rdsemester/BIO_PROJ/AQEEL_MODELS/
cd /home
pwd
setwd ('/home/aqeel/Documents/3rdsemester/BIO_PROJ/AQEEL_MODELS/')
ls
wd
getwd
getwd()
train<- read.csv('../Data/train.csv')
train
head(train)
ftest<- read.csv('../Data/test.csv')
dim(train[1:50])
train(1:50)
train<- read.csv('../Data/train.csv')
train(1:50)
train[1]
train[1:50,]
train[1:50,1]
train[1:50,2]
train[1:50,2]*100
train[1:50,2]
order(train[1:50,2])
train[1:50,2][order(train[1:50,2])]
train[1:50,2]
train[1:50,2][order(train[1:50,2])]
train[1:50,2]
train[1:50,2][order(train[1:50,2])]
order(train[1:50,2])
train[1:50,2] = train[1:50,2]*10
train[1:50,2]
train[1:50,2]
train[1:50,2] = train[1:50,2]*100
train[1:50,2]
train[1:50,2][order(train[1:50,2])]
order(train[1:50,2])
train<- read.csv('../Data/train.csv')
train[1:50,2]
order(train[1:50,2])
train[1:50,2] = train[1:50,2]*100
order(train[1:50,2])
?apply
rankmat <- function(mat=NULL){
mat = apply(mat,2,order(x))
return(mat)
}
rankmat(train[1:50,2])
rankmat <- function(mat=NULL){
mat = apply(mat,2,order
return(mat)
rankmat <- function(mat=NULL){
mat = apply(mat,2,order)
return(mat)
}
rankmat <- function(mat=NULL){
mat = apply(mat,2,order)
return(mat)
}
rankmat(train[1:50,2])
rankmat(train[1:50,2:4])
rankmat <- function(mat=NULL){
mat = apply(mat,2,order(decreasing = TRUE))
return(mat)
}
rankmat(train[1:50,2:4])
rankmat <- function(mat=NULL){
mat = apply(mat,2,order,decreasing = TRUE)
return(mat)
}
rankmat(train[1:50,2:4])
train[1:50,2]
train[1:50,2][order(train[1:50,2],decreasing = TRUE)]
order(train[1:50,2],decreasing = TRUE)
train<- read.csv('../Data/train.csv')
ftest<- read.csv('../Data/test.csv')
train[1:50]
train[1:50,]
train[1:50,1:8]
train[1:2,1:8]
train[1:2,1:8]
evalGold(rankmat(train[1:50,1:8]),rankmat(train[1:50,1:8]))
train[1:50,2]
train[1:50,2:3]
train[1:50,12:20]
colnames(train[1:50,12:20])
colnames(train[1:50,11:20])
colnames(train[1:50,11:18])
rankmat(train[1:50,11:18])
evalGold(rankmat(train[1:50,11:18]),rankmat(train[1:50,11:18]))
y_train<- train[51::,11:18]
y_train<- train[51:,11:18]
train<- read.csv('../Data/train.csv')
y_train<- train[51:9285,11:18]
y_test<-train[1:50,11:18]
names(train)
x_train<- train[ 51:9285, !(names(train) %in% drops]
drops<- c("GeneID","wt.t.0","tfA.del.t.0","tfA.del.t.10" ,"tfA.del.t.20" ,"tfA.del.t.30" ,"tfA.del.t.45" ,"tfA.del.t.60" ,"tfA.del.t.90" ,"tfA.del.t.120")
x_train<- train[ 51:9285, !(names(train) %in% drops]
drops<- c("GeneID","wt.t.0","tfA.del.t.0","tfA.del.t.10" ,"tfA.del.t.20" ,"tfA.del.t.30" ,"tfA.del.t.45" ,"tfA.del.t.60" ,"tfA.del.t.90" ,"tfA.del.t.120")
x_train<- train[ 51:9285, !(names(train) %in% drops)]
dim(x_train)
calc.cor.test <- function(x=NULL,y=NULL) {
cor.res <- cor.test(x,y,method = 'spear',alternative = 'great', continuity = T)
res <- c(cor.res$est,cor.res$p.val)
names(res) <- c('rho','p.val')
return(res)
}
evalGold <- function(pred=NULL,goldStandard=NULL) {
col.eval <- apply(as.array(1:8),1,function(x) calc.cor.test(x=pred[,x],y=goldStandard[,x]))
colnames(col.eval) <- colnames(pred)
col.eval['p.val',col.eval['p.val',] < 1e-16] <- 1e-16
row.eval <- apply(as.array(1:50),1,function(x) calc.cor.test(x=rank(pred[x,],ties.method = 'min'),y=rank(goldStandard[x,],ties.method = 'min')))
colnames(row.eval) <- rownames(pred)
row.eval['p.val',row.eval['p.val',] < 1e-16] <- 1e-16
geom.mean.col <- exp(sum(log(col.eval['p.val',]))/8)
geom.mean.row <- exp(sum(log(row.eval['p.val',]))/50)
score <- sum(-log(c(geom.mean.row,geom.mean.col)))/2
return(score)
}
rankmat <- function(mat=NULL){
mat = apply(mat,2,order,decreasing = TRUE)
return(mat)
}
setwd ('/home/aqeel/Documents/3rdsemester/BIO_PROJ/AQEEL_MODELS/')
train<- read.csv('../Data/train.csv')
drops<- c("GeneID","wt.t.0","tfA.del.t.0","tfA.del.t.10" ,"tfA.del.t.20" ,"tfA.del.t.30" ,"tfA.del.t.45" ,"tfA.del.t.60" ,"tfA.del.t.90" ,"tfA.del.t.120")
x_train<- train[ 51:9285, !(names(train) %in% drops)]
y_train<- train[51:9285,11:18]
x_test<- train[ 1:50, !(names(train) %in% drops)]
y_test<-train[1:50,11:18]
